(()=>{"use strict";var t={192:(t,e,i)=>{i.d(e,{Z:()=>l});var n=i(537),r=i.n(n),o=i(645),s=i.n(o)()(r());s.push([t.id,'*{box-sizing:border-box}body{margin:0;font-family:"Roboto Mono";color:#fff;background:linear-gradient(#0c0016, #1e0036)}.page{height:100vh}#title{text-align:center}#navbar{display:inline-block;font-size:22px;text-align:center;width:100%}#navbar a{color:transparent}#navbar i{color:#fff;transition:all .2s ease-in-out;border-radius:100%;border:1px solid #fff;padding:.3em}#navbar i:hover{color:#6f33fa;transform:scale(1.3);border-color:#6f33fa}.timeline{position:relative;width:660px;margin:0 auto;margin-top:100px;padding:1em 0;list-style-type:none}.timeline:before{position:absolute;left:50%;top:0;content:" ";display:block;width:6px;height:100%;margin-left:-3px;background:#505050;background:-moz-linear-gradient(top, rgba(80, 80, 80, 0) 0%, #505050 8%, #505050 92%, rgba(80, 80, 80, 0) 100%);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, #1e5799), color-stop(100%, #7db9e8));background:-webkit-linear-gradient(top, rgba(80, 80, 80, 0) 0%, #505050 8%, #505050 92%, rgba(80, 80, 80, 0) 100%);background:-o-linear-gradient(top, rgba(80, 80, 80, 0) 0%, #505050 8%, #505050 92%, rgba(80, 80, 80, 0) 100%);background:-ms-linear-gradient(top, rgba(80, 80, 80, 0) 0%, #505050 8%, #505050 92%, rgba(80, 80, 80, 0) 100%);background:linear-gradient(to bottom, rgba(80, 80, 80, 0) 0%, #505050 8%, #505050 92%, rgba(80, 80, 80, 0) 100%);z-index:5}.timeline li{padding:1em 0}.timeline li:after{content:"";display:block;height:0;clear:both;visibility:hidden}.direction-l{position:relative;width:300px;float:left;text-align:right}.direction-r{position:relative;width:300px;float:right}.flag-wrapper{position:relative;display:inline-block;text-align:center}.flag{position:relative;display:inline;background:#f8f8f8;padding:6px 10px;border-radius:5px;color:#000;font-weight:600;text-align:left}.direction-l .flag{-webkit-box-shadow:-1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15);-moz-box-shadow:-1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15);box-shadow:-1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15)}.direction-r .flag{-webkit-box-shadow:1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15);-moz-box-shadow:1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15);box-shadow:1px 1px 1px rgba(0,0,0,.15),0 0 1px rgba(0,0,0,.15)}.direction-l .flag:before,.direction-r .flag:before{position:absolute;top:50%;right:-40px;content:" ";display:block;width:12px;height:12px;margin-top:-10px;background:#fff;border-radius:10px;border:4px solid #ff5050;z-index:10}.direction-r .flag:before{left:-40px}.direction-l .flag:after{content:"";position:absolute;left:100%;top:50%;height:0;width:0;margin-top:-8px;border:solid transparent;border-left-color:#f8f8f8;border-width:8px;pointer-events:none}.direction-r .flag:after{content:"";position:absolute;right:100%;top:50%;height:0;width:0;margin-top:-8px;border:solid transparent;border-right-color:#f8f8f8;border-width:8px;pointer-events:none}.time-wrapper{display:inline;line-height:1em;font-size:.66666em;color:#fa5050;vertical-align:middle}.direction-l .time-wrapper{float:left}.direction-r .time-wrapper{float:right}.time{display:inline-block;padding:4px 6px;background:#f8f8f8}.desc{margin:1em .75em 0 0;font-size:.77777em;font-style:italic;line-height:1.5em}.direction-r .desc{margin:1em 0 0 .75em}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,EACE,qBAAA,CAGF,KACE,QAAA,CACA,yBAAA,CACA,UAAA,CACA,4CAAA,CAGF,MACE,YAAA,CAGF,OACE,iBAAA,CAGF,QACE,oBAAA,CACA,cAAA,CACA,iBAAA,CACA,UAAA,CACA,UACE,iBAAA,CAEF,UACE,UAAA,CACA,8BAAA,CACA,kBAAA,CACA,qBAAA,CACA,YAAA,CAEF,gBACE,aAAA,CACA,oBAAA,CACA,oBAAA,CAIJ,UACE,iBAAA,CACA,WAAA,CACA,aAAA,CACA,gBAAA,CACA,aAAA,CACA,oBAAA,CAGF,iBACE,iBAAA,CACA,QAAA,CACA,KAAA,CACA,WAAA,CACA,aAAA,CACA,SAAA,CACA,WAAA,CACA,gBAAA,CACA,kBAAA,CACA,+GAAA,CAOA,8GAAA,CAOA,kHAAA,CAOA,6GAAA,CAOA,8GAAA,CAOA,gHAAA,CAQA,SAAA,CAGF,aACE,aAAA,CAGF,mBACE,UAAA,CACA,aAAA,CACA,QAAA,CACA,UAAA,CACA,iBAAA,CAGF,aACE,iBAAA,CACA,WAAA,CACA,UAAA,CACA,gBAAA,CAGF,aACE,iBAAA,CACA,WAAA,CACA,WAAA,CAGF,cACE,iBAAA,CACA,oBAAA,CAEA,iBAAA,CAGF,MACE,iBAAA,CACA,cAAA,CACA,kBAAA,CACA,gBAAA,CACA,iBAAA,CAEA,UAAA,CAEA,eAAA,CACA,eAAA,CAGF,mBACE,uEAAA,CAEA,oEAAA,CACA,+DAAA,CAGF,mBACE,sEAAA,CAEA,mEAAA,CACA,8DAAA,CAGF,oDAEE,iBAAA,CACA,OAAA,CACA,WAAA,CACA,WAAA,CACA,aAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CACA,eAAA,CACA,kBAAA,CACA,wBAAA,CACA,UAAA,CAGF,0BACE,UAAA,CAGF,yBACE,UAAA,CACA,iBAAA,CACA,SAAA,CACA,OAAA,CACA,QAAA,CACA,OAAA,CACA,eAAA,CACA,wBAAA,CACA,yBAAA,CACA,gBAAA,CACA,mBAAA,CAGF,yBACE,UAAA,CACA,iBAAA,CACA,UAAA,CACA,OAAA,CACA,QAAA,CACA,OAAA,CACA,eAAA,CACA,wBAAA,CACA,0BAAA,CACA,gBAAA,CACA,mBAAA,CAGF,cACE,cAAA,CAEA,eAAA,CACA,kBAAA,CACA,aAAA,CACA,qBAAA,CAGF,2BACE,UAAA,CAGF,2BACE,WAAA,CAGF,MACE,oBAAA,CACA,eAAA,CACA,kBAAA,CAGF,MACE,oBAAA,CAEA,kBAAA,CACA,iBAAA,CACA,iBAAA,CAGF,mBACE,oBAAA",sourcesContent:['* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: "Roboto Mono";\r\n  color: white;\r\n  background: linear-gradient(#0c0016, #1e0036);\r\n}\r\n\r\n.page {\r\n  height: 100vh;\r\n}\r\n\r\n#title {\r\n  text-align: center;\r\n}\r\n\r\n#navbar {\r\n  display: inline-block;\r\n  font-size: 22px;\r\n  text-align: center;\r\n  width: 100%;\r\n  a {\r\n    color: transparent;\r\n  }\r\n  i {\r\n    color: #fff;\r\n    transition: all 0.2s ease-in-out;\r\n    border-radius: 100%;\r\n    border: 1px solid white;\r\n    padding: 0.3em;\r\n  }\r\n  i:hover {\r\n    color: #6f33fa;\r\n    transform: scale(1.3);\r\n    border-color: #6f33fa;\r\n  }\r\n}\r\n\r\n.timeline {\r\n  position: relative;\r\n  width: 660px;\r\n  margin: 0 auto;\r\n  margin-top: 100px;\r\n  padding: 1em 0;\r\n  list-style-type: none;\r\n}\r\n\r\n.timeline:before {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 0;\r\n  content: " ";\r\n  display: block;\r\n  width: 6px;\r\n  height: 100%;\r\n  margin-left: -3px;\r\n  background: rgb(80, 80, 80);\r\n  background: -moz-linear-gradient(\r\n    top,\r\n    rgba(80, 80, 80, 0) 0%,\r\n    rgb(80, 80, 80) 8%,\r\n    rgb(80, 80, 80) 92%,\r\n    rgba(80, 80, 80, 0) 100%\r\n  );\r\n  background: -webkit-gradient(\r\n    linear,\r\n    left top,\r\n    left bottom,\r\n    color-stop(0%, rgba(30, 87, 153, 1)),\r\n    color-stop(100%, rgba(125, 185, 232, 1))\r\n  );\r\n  background: -webkit-linear-gradient(\r\n    top,\r\n    rgba(80, 80, 80, 0) 0%,\r\n    rgb(80, 80, 80) 8%,\r\n    rgb(80, 80, 80) 92%,\r\n    rgba(80, 80, 80, 0) 100%\r\n  );\r\n  background: -o-linear-gradient(\r\n    top,\r\n    rgba(80, 80, 80, 0) 0%,\r\n    rgb(80, 80, 80) 8%,\r\n    rgb(80, 80, 80) 92%,\r\n    rgba(80, 80, 80, 0) 100%\r\n  );\r\n  background: -ms-linear-gradient(\r\n    top,\r\n    rgba(80, 80, 80, 0) 0%,\r\n    rgb(80, 80, 80) 8%,\r\n    rgb(80, 80, 80) 92%,\r\n    rgba(80, 80, 80, 0) 100%\r\n  );\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba(80, 80, 80, 0) 0%,\r\n    rgb(80, 80, 80) 8%,\r\n    rgb(80, 80, 80) 92%,\r\n    rgba(80, 80, 80, 0) 100%\r\n  );\r\n\r\n  z-index: 5;\r\n}\r\n\r\n.timeline li {\r\n  padding: 1em 0;\r\n}\r\n\r\n.timeline li:after {\r\n  content: "";\r\n  display: block;\r\n  height: 0;\r\n  clear: both;\r\n  visibility: hidden;\r\n}\r\n\r\n.direction-l {\r\n  position: relative;\r\n  width: 300px;\r\n  float: left;\r\n  text-align: right;\r\n}\r\n\r\n.direction-r {\r\n  position: relative;\r\n  width: 300px;\r\n  float: right;\r\n}\r\n\r\n.flag-wrapper {\r\n  position: relative;\r\n  display: inline-block;\r\n\r\n  text-align: center;\r\n}\r\n\r\n.flag {\r\n  position: relative;\r\n  display: inline;\r\n  background: rgb(248, 248, 248);\r\n  padding: 6px 10px;\r\n  border-radius: 5px;\r\n\r\n  color: #000;\r\n\r\n  font-weight: 600;\r\n  text-align: left;\r\n}\r\n\r\n.direction-l .flag {\r\n  -webkit-box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.15),\r\n    0 0 1px rgba(0, 0, 0, 0.15);\r\n  -moz-box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.15), 0 0 1px rgba(0, 0, 0, 0.15);\r\n  box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.15), 0 0 1px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.direction-r .flag {\r\n  -webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15),\r\n    0 0 1px rgba(0, 0, 0, 0.15);\r\n  -moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15), 0 0 1px rgba(0, 0, 0, 0.15);\r\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15), 0 0 1px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.direction-l .flag:before,\r\n.direction-r .flag:before {\r\n  position: absolute;\r\n  top: 50%;\r\n  right: -40px;\r\n  content: " ";\r\n  display: block;\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-top: -10px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  border: 4px solid rgb(255, 80, 80);\r\n  z-index: 10;\r\n}\r\n\r\n.direction-r .flag:before {\r\n  left: -40px;\r\n}\r\n\r\n.direction-l .flag:after {\r\n  content: "";\r\n  position: absolute;\r\n  left: 100%;\r\n  top: 50%;\r\n  height: 0;\r\n  width: 0;\r\n  margin-top: -8px;\r\n  border: solid transparent;\r\n  border-left-color: rgb(248, 248, 248);\r\n  border-width: 8px;\r\n  pointer-events: none;\r\n}\r\n\r\n.direction-r .flag:after {\r\n  content: "";\r\n  position: absolute;\r\n  right: 100%;\r\n  top: 50%;\r\n  height: 0;\r\n  width: 0;\r\n  margin-top: -8px;\r\n  border: solid transparent;\r\n  border-right-color: rgb(248, 248, 248);\r\n  border-width: 8px;\r\n  pointer-events: none;\r\n}\r\n\r\n.time-wrapper {\r\n  display: inline;\r\n\r\n  line-height: 1em;\r\n  font-size: 0.66666em;\r\n  color: rgb(250, 80, 80);\r\n  vertical-align: middle;\r\n}\r\n\r\n.direction-l .time-wrapper {\r\n  float: left;\r\n}\r\n\r\n.direction-r .time-wrapper {\r\n  float: right;\r\n}\r\n\r\n.time {\r\n  display: inline-block;\r\n  padding: 4px 6px;\r\n  background: rgb(248, 248, 248);\r\n}\r\n\r\n.desc {\r\n  margin: 1em 0.75em 0 0;\r\n\r\n  font-size: 0.77777em;\r\n  font-style: italic;\r\n  line-height: 1.5em;\r\n}\r\n\r\n.direction-r .desc {\r\n  margin: 1em 0 0 0.75em;\r\n}\r\n'],sourceRoot:""}]);const l=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(s[a]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);n&&s[h[0]]||(void 0!==o&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=o),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),r&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=r):h[4]="".concat(r)),e.push(h))}},e}},537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(r," */"),s=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},s=[],l=0;l<t.length;l++){var a=t[l],c=n.base?a[0]+n.base:a[0],h=o[c]||0,d="".concat(c," ").concat(h);o[c]=h+1;var u=i(d),f={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==u)e[u].references++,e[u].updater(f);else{var p=r(f,n);n.byIndex=l,e.splice(l,0,{identifier:d,updater:p,references:1})}s.push(d)}return s}function r(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var o=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var l=i(o[s]);e[l].references--}for(var a=n(t,r),c=0;c<o.length;c++){var h=i(o[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}o=a}}},569:t=>{var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function n(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}function r(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){r(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function l(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}function a(t){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},a(t)}function c(t,e){return c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},c(t,e)}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function d(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?h(t):e}function u(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var i,n=a(t);if(e){var r=a(this).constructor;i=Reflect.construct(n,arguments,r)}else i=n.apply(this,arguments);return d(this,i)}}function f(t,e,i){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,i){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=a(t)););return t}(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(i):r.value}},f(t,e,i||t)}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,r=!1,o=void 0;try{for(var s,l=t[Symbol.iterator]();!(n=(s=l.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){r=!0,o=t}finally{try{n||null==l.return||l.return()}finally{if(r)throw o}}return i}}(t,e)||g(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(t){return function(t){if(Array.isArray(t))return m(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||g(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(t,e){if(t){if("string"==typeof t)return m(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?m(t,e):void 0}}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}var b={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},v=function(){function e(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t(this,e),Object.assign(this,b,i),this.smartphone=b.smartphone,i.smartphone&&Object.assign(this.smartphone,i.smartphone),this.tablet=b.tablet,i.tablet&&Object.assign(this.tablet,i.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return n(e,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context&&("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(e){e.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var e=this,i=this.instance.scroll.y,n=i+this.windowHeight,r=this.instance.scroll.x,o=r+this.windowWidth;Object.entries(this.els).forEach((function(s){var l=p(s,2),a=l[0],c=l[1];if(!c||c.inView&&!t||("horizontal"===e.direction?o>=c.left&&r<c.right&&e.setInView(c,a):n>=c.top&&i<c.bottom&&e.setInView(c,a)),c&&c.inView)if("horizontal"===e.direction){var h=c.right-c.left;c.progress=(e.instance.scroll.x-(c.left-e.windowWidth))/(h+e.windowWidth),(o<c.left||r>c.right)&&e.setOutOfView(c,a)}else{var d=c.bottom-c.top;c.progress=(e.instance.scroll.y-(c.top-e.windowHeight))/(d+e.windowHeight),(n<c.top||i>c.bottom)&&e.setOutOfView(c,a)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,e){this.els[e].inView=!0,t.el.classList.add(t.class),this.currentElements[e]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[e].call=!1))}},{key:"setOutOfView",value:function(t,e){var i=this;this.els[e].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===e&&delete i.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,e){this.callWay=e,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var i=new Event(this.namespace+"call");this.el.dispatchEvent(i)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,e){this.listeners[t]||(this.listeners[t]=[]);var i=this.listeners[t];i.push(e),1===i.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,e){if(this.listeners[t]){var i=this.listeners[t],n=i.indexOf(e);n<0||(i.splice(n,1),0===i.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var e=this,i=t.type.replace(this.namespace,""),n=this.listeners[i];n&&0!==n.length&&n.forEach((function(t){switch(i){case"scroll":return t(e.instance);case"call":return t(e.callValue,e.callWay,e.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,e){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(e){t.el.removeEventListener(t.namespace+e,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(e){e.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),e}(),y="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:{};function w(t,e){return t(e={exports:{}},e.exports),e.exports}var x=w((function(t,e){t.exports={polyfill:function(){var t=window,e=document;if(!("scrollBehavior"in e.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var i,n=t.HTMLElement||t.Element,r={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:n.prototype.scroll||l,scrollIntoView:n.prototype.scrollIntoView},o=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,s=(i=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(i)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==a(arguments[0])?p.call(t,e.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):r.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(a(arguments[0])?r.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):p.call(t,e.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},n.prototype.scroll=n.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==a(arguments[0])){var t=arguments[0].left,e=arguments[0].top;p.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===e?this.scrollTop:~~e)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},n.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==a(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):r.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},n.prototype.scrollIntoView=function(){if(!0!==a(arguments[0])){var i=u(this),n=i.getBoundingClientRect(),o=this.getBoundingClientRect();i!==e.body?(p.call(this,i,i.scrollLeft+o.left-n.left,i.scrollTop+o.top-n.top),"fixed"!==t.getComputedStyle(i).position&&t.scrollBy({left:n.left,top:n.top,behavior:"smooth"})):t.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else r.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,e){this.scrollLeft=t,this.scrollTop=e}function a(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(t,e){return"Y"===e?t.clientHeight+s<t.scrollHeight:"X"===e?t.clientWidth+s<t.scrollWidth:void 0}function h(e,i){var n=t.getComputedStyle(e,null)["overflow"+i];return"auto"===n||"scroll"===n}function d(t){var e=c(t,"Y")&&h(t,"Y"),i=c(t,"X")&&h(t,"X");return e||i}function u(t){for(;t!==e.body&&!1===d(t);)t=t.parentNode||t.host;return t}function f(e){var i,n,r,s,l=(o()-e.startTime)/468;s=l=l>1?1:l,i=.5*(1-Math.cos(Math.PI*s)),n=e.startX+(e.x-e.startX)*i,r=e.startY+(e.y-e.startY)*i,e.method.call(e.scrollable,n,r),n===e.x&&r===e.y||t.requestAnimationFrame(f.bind(t,e))}function p(i,n,s){var a,c,h,d,u=o();i===e.body?(a=t,c=t.scrollX||t.pageXOffset,h=t.scrollY||t.pageYOffset,d=r.scroll):(a=i,c=i.scrollLeft,h=i.scrollTop,d=l),f({scrollable:a,method:d,startTime:u,startX:c,startY:h,x:n,y:s})}}}})),C=(x.polyfill,function(e){l(r,e);var i=u(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t(this,r),(e=i.call(this,n)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",e.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=x,window.smoothscrollPolyfill.polyfill()),e}return n(r,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),f(a(r.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;f(a(r.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(e,i){e.getBoundingClientRect();var n,r,o,s=e.dataset[t.name+"Class"]||t.class,l="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:i,a="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,c=e.dataset[t.name+"Repeat"],h=e.dataset[t.name+"Call"],d=e.dataset[t.name+"Target"],u=(o=void 0!==d?document.querySelector("".concat(d)):e).getBoundingClientRect();n=u.top+t.instance.scroll.y,r=u.left+t.instance.scroll.x;var f=n+o.offsetHeight,p=r+o.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var A=t.getRelativeOffset(a),g={el:e,targetEl:o,id:l,class:s,top:n+=A[0],bottom:f-=A[1],left:r,right:p,offset:a,progress:0,repeat:c,inView:!1,call:h};t.els[l]=g,e.classList.contains(s)&&t.setInView(t.els[l],l)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(e){var i=p(e,2),n=i[0],r=i[1],o=r.targetEl.getBoundingClientRect().top+t.instance.scroll.y,s=o+r.targetEl.offsetHeight,l=t.getRelativeOffset(r.offset);t.els[n].top=o+l[0],t.els[n].bottom=s-l[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var e=[0,0];if(t)for(var i=0;i<t.length;i++)"string"==typeof t[i]?t[i].includes("%")?e[i]=parseInt(t[i].replace("%","")*this.windowHeight/100):e[i]=parseInt(t[i]):e[i]=t[i];return e}},{key:"scrollTo",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,n=!!e.callback&&e.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");i="number"!=typeof t?t.getBoundingClientRect().top+i+this.instance.scroll.y:t+i;var r=function(){return parseInt(window.pageYOffset)===parseInt(i)};if(n){if(r())return void n();var o=function t(){r()&&(window.removeEventListener("scroll",t),n())};window.addEventListener("scroll",o)}window.scrollTo({top:i,behavior:0===e.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){f(a(r.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),r}(v)),k=Object.getOwnPropertySymbols,S=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;function T(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var O=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},i=0;i<10;i++)e["_"+String.fromCharCode(i)]=i;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var i,n,r=T(t),o=1;o<arguments.length;o++){for(var s in i=Object(arguments[o]))S.call(i,s)&&(r[s]=i[s]);if(k){n=k(i);for(var l=0;l<n.length;l++)E.call(i,n[l])&&(r[n[l]]=i[n[l]])}}return r};function B(){}B.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){var n=this;function r(){n.off(t,r),e.apply(i,arguments)}return r._=e,this.on(t,r,i)},emit:function(t){for(var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,r=i.length;n<r;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],r=[];if(n&&e)for(var o=0,s=n.length;o<s;o++)n[o].fn!==e&&n[o].fn._!==e&&r.push(n[o]);return r.length?i[t]=r:delete i[t],this}};var M=B,L=w((function(t,e){(function(){(null!==e?e:this).Lethargy=function(){function t(t,e,i,n){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=e?1+Math.abs(e):100,this.tolerance=null!=i?1+Math.abs(i):1.1,this.delay=null!=n?n:150,this.lastUpDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.lastDownDeltas=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this),this.deltasTimestamp=function(){var t,e,i;for(i=[],t=1,e=2*this.stability;1<=e?t<=e:t>=e;1<=e?t++:t--)i.push(null);return i}.call(this)}return t.prototype.check=function(t){var e;return null!=(t=t.originalEvent||t).wheelDelta?e=t.wheelDelta:null!=t.deltaY?e=-40*t.deltaY:null==t.detail&&0!==t.detail||(e=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),e>0?(this.lastUpDeltas.push(e),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(e),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var e,i,n,r,o,s,l;return null===(e=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&e[0]===e[2*this.stability-1])&&(n=e.slice(0,this.stability),i=e.slice(this.stability,2*this.stability),l=n.reduce((function(t,e){return t+e})),o=i.reduce((function(t,e){return t+e})),s=l/n.length,r=o/i.length,Math.abs(s)<Math.abs(r*this.tolerance)&&this.sensitivity<Math.abs(r)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(y)})),D="onwheel"in document,j="onmousewheel"in document,_="ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,W=navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,R=!!window.navigator.msPointerEnabled,H="onkeydown"in document,z=navigator.userAgent.indexOf("Firefox")>-1,I=Object.prototype.toString,Y=Object.prototype.hasOwnProperty;function P(t,e){return function(){return t.apply(e,arguments)}}var F=L.Lethargy,X="virtualscroll",V=U;function U(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var e=Array.prototype.slice.call(arguments,1);if(0===e.length)for(var i in t)Y.call(t,i)&&"function"==typeof t[i]&&"[object Function]"==I.call(t[i])&&e.push(i);for(var n=0;n<e.length;n++){var r=e[n];t[r]=P(t[r],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=O({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new F),this._emitter=new M,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function G(t,e,i){return(1-i)*t+i*e}function q(t){var e={};if(window.getComputedStyle){var i=getComputedStyle(t),n=i.transform||i.webkitTransform||i.mozTransform,r=n.match(/^matrix3d\((.+)\)$/);return r?(e.x=r?parseFloat(r[1].split(", ")[12]):0,e.y=r?parseFloat(r[1].split(", ")[13]):0):(r=n.match(/^matrix\((.+)\)$/),e.x=r?parseFloat(r[1].split(", ")[4]):0,e.y=r?parseFloat(r[1].split(", ")[5]):0),e}}function K(t){for(var e=[];t&&t!==document;t=t.parentNode)e.push(t);return e}U.prototype._notify=function(t){var e=this._event;e.x+=e.deltaX,e.y+=e.deltaY,this._emitter.emit(X,{x:e.x,y:e.y,deltaX:e.deltaX,deltaY:e.deltaY,originalEvent:t})},U.prototype._onWheel=function(t){var e=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var i=this._event;i.deltaX=t.wheelDeltaX||-1*t.deltaX,i.deltaY=t.wheelDeltaY||-1*t.deltaY,z&&1==t.deltaMode&&(i.deltaX*=e.firefoxMultiplier,i.deltaY*=e.firefoxMultiplier),i.deltaX*=e.mouseMultiplier,i.deltaY*=e.mouseMultiplier,this._notify(t)}},U.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,e.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},U.prototype._onTouchStart=function(t){var e=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=e.pageX,this.touchStartY=e.pageY},U.prototype._onTouchMove=function(t){var e=this.options;e.preventTouch&&!t.target.classList.contains(e.unpreventTouchClass)&&t.preventDefault();var i=this._event,n=t.targetTouches?t.targetTouches[0]:t;i.deltaX=(n.pageX-this.touchStartX)*e.touchMultiplier,i.deltaY=(n.pageY-this.touchStartY)*e.touchMultiplier,this.touchStartX=n.pageX,this.touchStartY=n.pageY,this._notify(t)},U.prototype._onKeyDown=function(t){var e=this._event;e.deltaX=e.deltaY=0;var i=window.innerHeight-40;switch(t.keyCode){case 37:case 38:e.deltaY=this.options.keyStep;break;case 39:case 40:e.deltaY=-this.options.keyStep;break;case t.shiftKey:e.deltaY=i;break;case 32:e.deltaY=-i;break;default:return}this._notify(t)},U.prototype._bind=function(){D&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),j&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),_&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),R&&W&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),H&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},U.prototype._unbind=function(){D&&this.el.removeEventListener("wheel",this._onWheel),j&&this.el.removeEventListener("mousewheel",this._onMouseWheel),_&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),R&&W&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),H&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},U.prototype.on=function(t,e){this._emitter.on(X,t,e);var i=this._emitter.e;i&&i[X]&&1===i[X].length&&this._bind()},U.prototype.off=function(t,e){this._emitter.off(X,t,e);var i=this._emitter.e;(!i[X]||i[X].length<=0)&&this._unbind()},U.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},U.prototype.destroy=function(){this._emitter.off(),this._unbind()};var N=.1,Q="function"==typeof Float32Array;function Z(t,e){return 1-3*e+3*t}function J(t,e){return 3*e-6*t}function $(t){return 3*t}function tt(t,e,i){return((Z(e,i)*t+J(e,i))*t+$(e))*t}function et(t,e,i){return 3*Z(e,i)*t*t+2*J(e,i)*t+$(e)}function it(t){return t}var nt=function(t,e,i,n){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===n)return it;for(var r=Q?new Float32Array(11):new Array(11),o=0;o<11;++o)r[o]=tt(o*N,t,i);return function(o){return 0===o?0:1===o?1:tt(function(e){for(var n=0,o=1;10!==o&&r[o]<=e;++o)n+=N;--o;var s=n+(e-r[o])/(r[o+1]-r[o])*N,l=et(s,t,i);return l>=.001?function(t,e,i,n){for(var r=0;r<4;++r){var o=et(e,i,n);if(0===o)return e;e-=(tt(e,i,n)-t)/o}return e}(e,s,t,i):0===l?s:function(t,e,i,n,r){var o,s,l=0;do{(o=tt(s=e+(i-e)/2,n,r)-t)>0?i=s:e=s}while(Math.abs(o)>1e-7&&++l<10);return s}(e,n,n+N,t,i)}(o),e,n)}},rt=function(e){l(r,e);var i=u(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t(this,r),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(e=i.call(this,n)).inertia&&(e.lerp=.1*e.inertia),e.isScrolling=!1,e.isDraggingScrollbar=!1,e.isTicking=!1,e.hasScrollTicking=!1,e.parallaxElements={},e.stop=!1,e.scrollbarContainer=n.scrollbarContainer,e.checkKey=e.checkKey.bind(h(e)),window.addEventListener("keydown",e.checkKey,!1),e}return n(r,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=s({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new V({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(e){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(e),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),f(a(r.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,e=this.el.children,i=0;i<e.length;i++)t+=e[i].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var e=this;if(this.stop)9==t.keyCode&&requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case 9:requestAnimationFrame((function(){e.html.scrollTop=0,document.body.scrollTop=0,e.html.scrollLeft=0,document.body.scrollLeft=0,e.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case 38:this.instance.delta[this.directionAxis]-=240;break;case 40:this.instance.delta[this.directionAxis]+=240;break;case 33:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case 34:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case 36:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case 35:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case 32:document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"checkScroll",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(e||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var i=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),n=Date.now()-this.startScrollTs;if(!this.animatingScroll&&n>100&&(i<.5&&0!=this.instance.delta[this.directionAxis]||i<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(i){var n=p(i,2),r=(n[0],n[1]);r.persistent||t.instance.scroll[t.directionAxis]>r.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<r.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(r.el,-t.instance.scroll[t.directionAxis],0):t.transform(r.el,0,-t.instance.scroll[t.directionAxis]),r.inView||(r.inView=!0,r.el.style.opacity=1,r.el.style.pointerEvents="all",r.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((r.inView||e)&&(r.inView=!1,r.el.style.opacity=0,r.el.style.pointerEvents="none",r.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(r.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var o=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,o,0):this.transform(this.scrollbarThumb,0,o)}f(a(r.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var e,i=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;e="both"===i?t.deltaX+t.deltaY:"vertical"===i?t.deltaY:"horizontal"===i?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=e*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=G(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var e=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var i=100*(t.clientX-e.scrollbarBCR.left)/e.scrollbarWidth*e.instance.limit.x/100,n=100*(t.clientY-e.scrollbarBCR.top)/e.scrollbarHeight*e.instance.limit.y/100;n>0&&n<e.instance.limit.y&&(e.instance.delta.y=n),i>0&&i<e.instance.limit.x&&(e.instance.delta.x=i)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(e,i){var n,r,o,s=K(e),l=Object.entries(t.sections).map((function(t){var e=p(t,2);return e[0],e[1]})).find((function(t){return s.includes(t.el)})),a=e.dataset[t.name+"Class"]||t.class,c="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"el"+i,h=e.dataset[t.name+"Repeat"],d=e.dataset[t.name+"Call"],u=e.dataset[t.name+"Position"],f=e.dataset[t.name+"Delay"],A=e.dataset[t.name+"Direction"],g="string"==typeof e.dataset[t.name+"Sticky"],m=!!e.dataset[t.name+"Speed"]&&parseFloat(e.dataset[t.name+"Speed"])/10,b="string"==typeof e.dataset[t.name+"Offset"]?e.dataset[t.name+"Offset"].split(","):t.offset,v=e.dataset[t.name+"Target"],y=(o=void 0!==v?document.querySelector("".concat(v)):e).getBoundingClientRect();null===l||l.inView?(n=y.top+t.instance.scroll.y-q(o).y,r=y.left+t.instance.scroll.x-q(o).x):(n=y.top-q(l.el).y-q(o).y,r=y.left-q(l.el).x-q(o).x);var w=n+o.offsetHeight,x=r+o.offsetWidth,C={x:(x-r)/2+r,y:(w-n)/2+n};if(g){var k=e.getBoundingClientRect(),S=k.top,E=k.left,T={x:E-r,y:S-n};n+=window.innerHeight,r+=window.innerWidth,w=S+o.offsetHeight-e.offsetHeight-T[t.directionAxis],C={x:((x=E+o.offsetWidth-e.offsetWidth-T[t.directionAxis])-r)/2+r,y:(w-n)/2+n}}h="false"!=h&&(null!=h||t.repeat);var O=[0,0];if(b)if("horizontal"===t.direction){for(var B=0;B<b.length;B++)"string"==typeof b[B]?b[B].includes("%")?O[B]=parseInt(b[B].replace("%","")*t.windowWidth/100):O[B]=parseInt(b[B]):O[B]=b[B];r+=O[0],x-=O[1]}else{for(B=0;B<b.length;B++)"string"==typeof b[B]?b[B].includes("%")?O[B]=parseInt(b[B].replace("%","")*t.windowHeight/100):O[B]=parseInt(b[B]):O[B]=b[B];n+=O[0],w-=O[1]}var M={el:e,id:c,class:a,section:l,top:n,middle:C,bottom:w,left:r,right:x,offset:b,progress:0,repeat:h,inView:!1,call:d,speed:m,delay:f,position:u,target:o,direction:A,sticky:g};t.els[c]=M,e.classList.contains(a)&&t.setInView(t.els[c],c),(!1!==m||g)&&(t.parallaxElements[c]=M)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var e=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===e.length&&(e=[this.el]),e.forEach((function(e,i){var n="string"==typeof e.dataset[t.name+"Id"]?e.dataset[t.name+"Id"]:"section"+i,r=e.getBoundingClientRect(),o={x:r.left-1.5*window.innerWidth-q(e).x,y:r.top-1.5*window.innerHeight-q(e).y},s={x:o.x+r.width+2*window.innerWidth,y:o.y+r.height+2*window.innerHeight},l="string"==typeof e.dataset[t.name+"Persistent"];e.setAttribute("data-scroll-section-id",n);var a={el:e,offset:o,limit:s,inView:!1,persistent:l,id:n};t.sections[n]=a}))}},{key:"transform",value:function(t,e,i,n){var r;if(n){var o=q(t),s=G(o.x,e,n),l=G(o.y,i,n);r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(s,",").concat(l,",0,1)")}else r="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(e,",").concat(i,",0,1)");t.style.webkitTransform=r,t.style.msTransform=r,t.style.transform=r}},{key:"transformElements",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.instance.scroll.x+this.windowWidth,r=this.instance.scroll.y+this.windowHeight,o={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(s){var l=p(s,2),a=(l[0],l[1]),c=!1;if(t&&(c=0),a.inView||i)switch(a.position){case"top":case"left":c=e.instance.scroll[e.directionAxis]*-a.speed;break;case"elementTop":c=(r-a.top)*-a.speed;break;case"bottom":c=(e.instance.limit[e.directionAxis]-r+e.windowHeight)*a.speed;break;case"elementLeft":c=(n-a.left)*-a.speed;break;case"right":c=(e.instance.limit[e.directionAxis]-n+e.windowHeight)*a.speed;break;default:c=(o[e.directionAxis]-a.middle[e.directionAxis])*-a.speed}a.sticky&&(c=a.inView?"horizontal"===e.direction?e.instance.scroll.x-a.left+window.innerWidth:e.instance.scroll.y-a.top+window.innerHeight:"horizontal"===e.direction?e.instance.scroll.x<a.left-window.innerWidth&&e.instance.scroll.x<a.left-window.innerWidth/2?0:e.instance.scroll.x>a.right&&e.instance.scroll.x>a.right+100&&a.right-a.left+window.innerWidth:e.instance.scroll.y<a.top-window.innerHeight&&e.instance.scroll.y<a.top-window.innerHeight/2?0:e.instance.scroll.y>a.bottom&&e.instance.scroll.y>a.bottom+100&&a.bottom-a.top+window.innerHeight),!1!==c&&("horizontal"===a.direction||"horizontal"===e.direction&&"vertical"!==a.direction?e.transform(a.el,c,0,!t&&a.delay):e.transform(a.el,0,c,!t&&a.delay))}))}},{key:"scrollTo",value:function(t){var e=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=parseInt(i.offset)||0,r=isNaN(parseInt(i.duration))?1e3:parseInt(i.duration),o=i.easing||[.25,0,.35,1],s=!!i.disableLerp,l=!!i.callback&&i.callback;if(o=nt.apply(void 0,A(o)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){var a=K(t).includes(this.el);if(!a)return;var c=t.getBoundingClientRect(),h=c.top,d=c.left,u=K(t),f=u.find((function(t){return Object.entries(e.sections).map((function(t){var e=p(t,2);return e[0],e[1]})).find((function(e){return e.el==t}))})),g=0;g=f?q(f)[this.directionAxis]:-this.instance.scroll[this.directionAxis],n="horizontal"===this.direction?d+n-g:h+n-g}else n=t+n;var m=parseFloat(this.instance.delta[this.directionAxis]),b=Math.max(0,Math.min(n,this.instance.limit[this.directionAxis])),v=b-m,y=function(t){s?"horizontal"===e.direction?e.setScroll(m+v*t,e.instance.delta.y):e.setScroll(e.instance.delta.x,m+v*t):e.instance.delta[e.directionAxis]=m+v*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var w=Date.now(),x=function t(){var i=(Date.now()-w)/r;i>1?(y(1),e.animatingScroll=!1,0==r&&e.update(),l&&l()):(e.scrollToRaf=requestAnimationFrame(t),y(o(i)))};x()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,e){this.instance=s(s({},this.instance),{},{scroll:{x:t,y:e},delta:{x:t,y:e},speed:0})}},{key:"destroy",value:function(){f(a(r.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),r}(v),ot=function(){function e(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};t(this,e),this.options=i,Object.assign(this,b,i),this.smartphone=b.smartphone,i.smartphone&&Object.assign(this.smartphone,i.smartphone),this.tablet=b.tablet,i.tablet&&Object.assign(this.tablet,i.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return n(e,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new rt(this.options):this.scroll=new C(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),e=document.getElementById(t);e&&this.scroll.scrollTo(e)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,e){this.scroll.scrollTo(t,e)}},{key:"setScroll",value:function(t,e){this.scroll.setScroll(t,e)}},{key:"on",value:function(t,e){this.scroll.setEvents(t,e)}},{key:"off",value:function(t,e){this.scroll.unsetEvents(t,e)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),e}();const st=ot;var lt=i(379),at=i.n(lt),ct=i(795),ht=i.n(ct),dt=i(569),ut=i.n(dt),ft=i(565),pt=i.n(ft),At=i(216),gt=i.n(At),mt=i(589),bt=i.n(mt),vt=i(192),yt={};yt.styleTagTransform=bt(),yt.setAttributes=pt(),yt.insert=ut().bind(null,"head"),yt.domAPI=ht(),yt.insertStyleElement=gt(),at()(vt.Z,yt),vt.Z&&vt.Z.locals&&vt.Z.locals,new st;const wt=document.querySelectorAll("body");function xt(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}function Ct(){for(var t=0;t<wt.length;t++)xt(wt[t])&&wt[t].classList.add("in-view")}window.addEventListener("load",Ct),window.addEventListener("resize",Ct),window.addEventListener("scroll",Ct)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,